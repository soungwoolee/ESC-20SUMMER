{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMpyXzwP4fV00woY4F2u7vr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soungwoolee/ESC-20SUMMER/blob/master/HW3_soungwoo\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fgO75WtTJUBB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch\n",
        "import torchvision\n",
        "import torch.nn"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zVfh7Z_yJwZp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "495d7cf2-989e-4052-bd85-f31cf2277c53"
      },
      "source": [
        " torch.cuda.is_available() "
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I_nw0l0YKDih",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch\n",
        "import torchvision.datasets as dsets\n",
        "import torchvision.transforms as transforms\n",
        "import torch.nn.init\n",
        "\n",
        "device= 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "    #for reproducibility\n",
        "torch.manual_seed(777)\n",
        "if device == 'cuda':\n",
        "    torch.cuda.manual_seed_all(777)\n",
        "        \n",
        "#학습에 사용되는 parameters 설정\n",
        "\n",
        "learning_rate = 0.001\n",
        "trainig_epochs = 15\n",
        "batch_size = 100\n",
        "\n",
        "#데이터셋 가져오기 (MNISTdata)\n",
        "\n",
        "mnist_train = dsets.MNIST(root = 'MNIST_data/',\n",
        "                         train=True,\n",
        "                         transform = transforms.ToTensor(),\n",
        "                         download = True)\n",
        "\n",
        "mnist_test = dsets.MNIST(root= 'MNIST_data/',\n",
        "                        train= False,\n",
        "                        transform = transforms.ToTensor(),\n",
        "                        download = True)\n",
        "\n",
        "#dataset loader\n",
        "\n",
        "data_loader = torch.utils.data.DataLoader (dataset= mnist_train,\n",
        "                                          batch_size = batch_size,\n",
        "                                          shuffle =True,\n",
        "                                          drop_last = True)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wogr589MKWEz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# 기존 모델\n",
        "\n",
        "class CNN_(torch.nn.Module):\n",
        "    \n",
        "    def __init__(self):\n",
        "        \n",
        "        super(CNN_,self).__init__()\n",
        "        self.keep_prob = 0.5\n",
        "        \n",
        "        self.layer1 = torch.nn.Sequential(torch.nn.Conv2d(1,32,kernel_size=3, stride=1, padding=1),\n",
        "                                         torch.nn.ReLU(), \n",
        "                                         torch.nn.MaxPool2d(kernel_size=2, stride=2))\n",
        "        \n",
        "        self.layer2 = torch.nn.Sequential(torch.nn.Conv2d(32,64,kernel_size=3, stride=1, padding=1),\n",
        "                                         torch.nn.ReLU(), \n",
        "                                         torch.nn.MaxPool2d(kernel_size=2, stride=2))\n",
        "        \n",
        "        self.layer3 = torch.nn.Sequential(torch.nn.Conv2d(64,128, kernel_size=3, stride=1, padding=1),\n",
        "                                         torch.nn.ReLU(), \n",
        "                                         torch.nn.MaxPool2d(kernel_size=2,stride=2, padding=1))\n",
        "        \n",
        "        self.fc1 = torch.nn.Linear(4*4*128,625, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc1.weight)\n",
        "        self.layer4 = torch.nn.Sequential(self.fc1, torch.nn.ReLU(), torch.nn.Dropout(p=1-self.keep_prob))\n",
        "        \n",
        "        self.fc2 = torch.nn.Linear(625, 10, bias =True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "        \n",
        "   \n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)\n",
        "        out = self.layer2(out)\n",
        "        out = self.layer3(out)\n",
        "        out = out.view(out.size(0),-1)\n",
        "        out = self.layer4(out)\n",
        "        out = self.fc2(out)\n",
        "        return out"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6JYauw1nKaRr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model = CNN_().to(device)\n",
        "criterion = torch.nn.CrossEntropyLoss().to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr= learning_rate)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yf3P9sSiKf7H",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "outputId": "6402afd1-a060-494e-e3df-e390ae1f2c63"
      },
      "source": [
        "total_batch = len(data_loader)\n",
        "training_epochs = 15\n",
        "print(\"Learning started. It takes sometime.\")\n",
        "for epoch in range(training_epochs):\n",
        "    avg_cost = 0\n",
        "    \n",
        "    for X,Y in data_loader:\n",
        "        X=X.to(device)\n",
        "        Y=Y.to(device)\n",
        "        \n",
        "        optimizer.zero_grad()\n",
        "        hypothesis = model(X)\n",
        "        cost = criterion(hypothesis,Y)\n",
        "        cost.backward()\n",
        "        optimizer.step()\n",
        "        \n",
        "        avg_cost += cost / total_batch\n",
        "        \n",
        "    print('[Epoch: {:>4}] cost = {:>.9}'.format(epoch+1, avg_cost))\n",
        "\n",
        "print('Learning Finished')"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Learning started. It takes sometime.\n",
            "[Epoch:    1] cost = 0.19046697\n",
            "[Epoch:    2] cost = 0.0532270037\n",
            "[Epoch:    3] cost = 0.0389571264\n",
            "[Epoch:    4] cost = 0.0291907098\n",
            "[Epoch:    5] cost = 0.0232834741\n",
            "[Epoch:    6] cost = 0.0205408838\n",
            "[Epoch:    7] cost = 0.0189003404\n",
            "[Epoch:    8] cost = 0.0136775412\n",
            "[Epoch:    9] cost = 0.012980774\n",
            "[Epoch:   10] cost = 0.0124452487\n",
            "[Epoch:   11] cost = 0.0102210809\n",
            "[Epoch:   12] cost = 0.00976705085\n",
            "[Epoch:   13] cost = 0.00713403476\n",
            "[Epoch:   14] cost = 0.0100049758\n",
            "[Epoch:   15] cost = 0.00799825508\n",
            "Learning Finished\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "od4EtOEuKlgq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "7470e609-61ae-4961-c37a-7ad119ce8a36"
      },
      "source": [
        "with torch.no_grad():\n",
        "    X_test = mnist_test.test_data.view(len(mnist_test),1,28,28).float().to(device)\n",
        "    Y_test = mnist_test.test_labels.to(device)\n",
        "    \n",
        "    prediction = model(X_test)\n",
        "    correct_prediction = torch.argmax(prediction,1)== Y_test\n",
        "    accuracy = correct_prediction.float().mean()\n",
        "    print('Accuracy: ', accuracy.item())"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:60: UserWarning: test_data has been renamed data\n",
            "  warnings.warn(\"test_data has been renamed data\")\n",
            "/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:50: UserWarning: test_labels has been renamed targets\n",
            "  warnings.warn(\"test_labels has been renamed targets\")\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Accuracy:  0.9864999651908875\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ec14Gz_jO-MV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# 과제 코드\n",
        "\n",
        "class CNN(torch.nn.Module):\n",
        "    def __init__(self):\n",
        "        super(CNN,self).__init__()\n",
        "        self.keep_prob = 0.5\n",
        "        \n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "        torch.nn.Conv2d(1,32,kernel_size = 4, stride=1, padding=1),\n",
        "        #kernal size = 4\n",
        "            \n",
        "        torch.nn.ReLU(), \n",
        "        torch.nn.MaxPool2d(kernel_size=2, stride =2)) \n",
        "        \n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "        torch.nn.Conv2d(32,64,kernel_size = 3, stride=1, padding=1),\n",
        "        torch.nn.ReLU(),\n",
        "        torch.nn.MaxPool2d(kernel_size=2, stride =2))\n",
        "        \n",
        "        self.layer3 = torch.nn.Sequential(\n",
        "        torch.nn.Conv2d(64,128,kernel_size = 3, stride=2, padding=1),\n",
        "        torch.nn.ReLU(),\n",
        "        torch.nn.MaxPool2d(kernel_size=2, stride =2, padding =1))  \n",
        "        #stride = 2\n",
        "\n",
        "        self.fc1 = torch.nn.Linear(2*2*128,625,bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc1.weight)\n",
        "        \n",
        "        #layer 3 까지 output 2*2\n",
        "        \n",
        "        self.layer4 = torch.nn.Sequential(self.fc1,\n",
        "                                         torch.nn.ReLU(),\n",
        "                                         torch.nn.Dropout(p=1-self.keep_prob))\n",
        "        self.fc2 = torch.nn.Linear(625,10,bias = True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "        \n",
        "        \n",
        "        \n",
        "    def forward(self,x):\n",
        "        out= self.layer1(x)\n",
        "        out = self.layer2(out)\n",
        "        out = self.layer3(out)\n",
        "        out = out.view(out.size(0),-1) \n",
        "        out = self.layer4(out)\n",
        "        out = self.fc2(out)\n",
        "        \n",
        "        return out"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "68o_hwI-QZoE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model = CNN().to(device)\n",
        "criterion = torch.nn.CrossEntropyLoss().to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr= learning_rate)"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3zDW_f5vQfCp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "outputId": "d08af71b-4460-404a-b501-92b76698076a"
      },
      "source": [
        "total_batch = len(data_loader)\n",
        "model.train()\n",
        "print('Learning strated. It takes sometime')\n",
        "\n",
        "for epoch in range(training_epochs):\n",
        "    avg_cost = 0\n",
        "    for X, Y in data_loader:\n",
        "        X = X.to(device)\n",
        "        Y = Y.to(device)\n",
        "        \n",
        "        optimizer.zero_grad()\n",
        "        hypothesis = model(X)\n",
        "        cost = criterion(hypothesis, Y)\n",
        "        cost.backward()\n",
        "        optimizer.step()\n",
        "        \n",
        "        avg_cost += cost / total_batch\n",
        "        \n",
        "    print('[Epoch: {:>4}] cost = {:>.9}'.format(epoch + 1, avg_cost))\n",
        "\n",
        "print('Learning Finished')"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Learning strated. It takes sometime\n",
            "[Epoch:    1] cost = 0.252729416\n",
            "[Epoch:    2] cost = 0.0628103241\n",
            "[Epoch:    3] cost = 0.0451951921\n",
            "[Epoch:    4] cost = 0.0369601957\n",
            "[Epoch:    5] cost = 0.0292532984\n",
            "[Epoch:    6] cost = 0.0239604376\n",
            "[Epoch:    7] cost = 0.0201665852\n",
            "[Epoch:    8] cost = 0.0193891525\n",
            "[Epoch:    9] cost = 0.0153452531\n",
            "[Epoch:   10] cost = 0.0131105436\n",
            "[Epoch:   11] cost = 0.0137629583\n",
            "[Epoch:   12] cost = 0.0117986165\n",
            "[Epoch:   13] cost = 0.0103135239\n",
            "[Epoch:   14] cost = 0.0104296049\n",
            "[Epoch:   15] cost = 0.00887764432\n",
            "Learning Finished\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V5CdR70YQlhq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "a1053682-a922-469a-fd68-ed4445525209"
      },
      "source": [
        "with torch.no_grad():\n",
        "    X_test = mnist_test.test_data.view(len(mnist_test),1,28,28).float().to(device)\n",
        "    Y_test = mnist_test.test_labels.to(device)\n",
        "    \n",
        "    prediction = model(X_test)\n",
        "    correct_prediction = torch.argmax(prediction,1)== Y_test\n",
        "    accuracy = correct_prediction.float().mean()\n",
        "    print('Accuracy: ', accuracy.item())"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy:  0.9863999485969543\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:60: UserWarning: test_data has been renamed data\n",
            "  warnings.warn(\"test_data has been renamed data\")\n",
            "/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:50: UserWarning: test_labels has been renamed targets\n",
            "  warnings.warn(\"test_labels has been renamed targets\")\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IFWuZEXXS1kc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fHtU2Rg7YSUo",
        "colab_type": "text"
      },
      "source": [
        "cost와 accuracy 모두 큰 차이 없음 "
      ]
    }
  ]
}